// Copyright 2025 Samvel Khalatyan. All rights reserved.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v5.29.5
// source: question.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/gofeaturespb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// QuestionSet is a container for questions in the database.
//
// Next ID: 2
type QuestionSet struct {
	state                protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Questions *[]*Question           `protobuf:"bytes,1,rep,name=questions"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *QuestionSet) Reset() {
	*x = QuestionSet{}
	mi := &file_question_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuestionSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionSet) ProtoMessage() {}

func (x *QuestionSet) ProtoReflect() protoreflect.Message {
	mi := &file_question_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *QuestionSet) GetQuestions() []*Question {
	if x != nil {
		if x.xxx_hidden_Questions != nil {
			return *x.xxx_hidden_Questions
		}
	}
	return nil
}

func (x *QuestionSet) SetQuestions(v []*Question) {
	x.xxx_hidden_Questions = &v
}

type QuestionSet_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Questions []*Question
}

func (b0 QuestionSet_builder) Build() *QuestionSet {
	m0 := &QuestionSet{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Questions = &b.Questions
	return m0
}

// Question holds metadata for a single question.
//
// Next ID: 4
type Question struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Id          int32                  `protobuf:"varint,1,opt,name=id"`
	xxx_hidden_Description *string                `protobuf:"bytes,2,opt,name=description"`
	xxx_hidden_Tags        []string               `protobuf:"bytes,3,rep,name=tags"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *Question) Reset() {
	*x = Question{}
	mi := &file_question_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Question) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Question) ProtoMessage() {}

func (x *Question) ProtoReflect() protoreflect.Message {
	mi := &file_question_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Question) GetId() int32 {
	if x != nil {
		return x.xxx_hidden_Id
	}
	return 0
}

func (x *Question) GetDescription() string {
	if x != nil {
		if x.xxx_hidden_Description != nil {
			return *x.xxx_hidden_Description
		}
		return ""
	}
	return ""
}

func (x *Question) GetTags() []string {
	if x != nil {
		return x.xxx_hidden_Tags
	}
	return nil
}

func (x *Question) SetId(v int32) {
	x.xxx_hidden_Id = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 3)
}

func (x *Question) SetDescription(v string) {
	x.xxx_hidden_Description = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 3)
}

func (x *Question) SetTags(v []string) {
	x.xxx_hidden_Tags = v
}

func (x *Question) HasId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *Question) HasDescription() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *Question) ClearId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Id = 0
}

func (x *Question) ClearDescription() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Description = nil
}

type Question_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// id is the questino identifier.
	Id *int32
	// description is a short desription of the question.
	Description *string
	// tags are free-form strings to group questions into sets.
	Tags []string
}

func (b0 Question_builder) Build() *Question {
	m0 := &Question{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Id != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 3)
		x.xxx_hidden_Id = *b.Id
	}
	if b.Description != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 3)
		x.xxx_hidden_Description = b.Description
	}
	x.xxx_hidden_Tags = b.Tags
	return m0
}

var File_question_proto protoreflect.FileDescriptor

const file_question_proto_rawDesc = "" +
	"\n" +
	"\x0equestion.proto\x12\x05iq.pb\x1a!google/protobuf/go_features.proto\"<\n" +
	"\vQuestionSet\x12-\n" +
	"\tquestions\x18\x01 \x03(\v2\x0f.iq.pb.QuestionR\tquestions\"P\n" +
	"\bQuestion\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x05R\x02id\x12 \n" +
	"\vdescription\x18\x02 \x01(\tR\vdescription\x12\x12\n" +
	"\x04tags\x18\x03 \x03(\tR\x04tagsB$Z\x1agithub.com/skhal/lab/iq/pb\x92\x03\x05\xd2>\x02\x10\x03b\beditionsp\xe8\a"

var file_question_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_question_proto_goTypes = []any{
	(*QuestionSet)(nil), // 0: iq.pb.QuestionSet
	(*Question)(nil),    // 1: iq.pb.Question
}
var file_question_proto_depIdxs = []int32{
	1, // 0: iq.pb.QuestionSet.questions:type_name -> iq.pb.Question
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_question_proto_init() }
func file_question_proto_init() {
	if File_question_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_question_proto_rawDesc), len(file_question_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_question_proto_goTypes,
		DependencyIndexes: file_question_proto_depIdxs,
		MessageInfos:      file_question_proto_msgTypes,
	}.Build()
	File_question_proto = out.File
	file_question_proto_goTypes = nil
	file_question_proto_depIdxs = nil
}
